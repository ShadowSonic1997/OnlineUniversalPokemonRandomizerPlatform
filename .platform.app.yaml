name: pokemon-randomizer

type: python:3.9

disk: 512

dependencies:
    python3:
        flask: "*"

hooks:
    build: |
        # Create a simple Flask server to serve the files
        cat > server.py << 'EOL'
        from flask import Flask, send_from_directory, Response, request, render_template_string
        import os

        app = Flask(__name__)

        # Add security headers
        @app.after_request
        def add_security_headers(response):
            response.headers['Cross-Origin-Opener-Policy'] = 'same-origin'
            response.headers['Cross-Origin-Embedder-Policy'] = 'require-corp'
            return response

        # Serve static files with optional modifications
        @app.route('/<path:path>')
        def serve_file(path):
            if os.path.exists(path):
                return send_from_directory('.', path)
            return 'File not found', 404

        # Inject our fixes into the index.html
        @app.route('/')
        def serve_index():
            try:
                with open('index.html', 'r') as f:
                    content = f.read()
                    
                # Inject our fix directly into the HTML
                fix_script = """
                <script>
                // Fix for CheerpJ IndexedDB issues
                (function() {
                    console.log("CheerpJ Fix Loading");
                    
                    // Wait for page to load before initializing CheerpJ fix
                    window.addEventListener('load', function() {
                        // Try to initialize the IndexedDB with the required schema
                        function initDB() {
                            try {
                                console.log("Initializing IndexedDB for CheerpJ");
                                var dbName = 'cheerpjFS';
                                
                                // First delete the database to start fresh
                                var delReq = indexedDB.deleteDatabase(dbName);
                                delReq.onsuccess = function() {
                                    // Open a fresh database
                                    var req = indexedDB.open(dbName, 1);
                                    
                                    req.onupgradeneeded = function(event) {
                                        var db = event.target.result;
                                        console.log("Creating required stores");
                                        
                                        // Create all possible stores CheerpJ might need
                                        if (!db.objectStoreNames.contains('files')) {
                                            db.createObjectStore('files', { keyPath: 'path' });
                                        }
                                        if (!db.objectStoreNames.contains('metadata')) {
                                            db.createObjectStore('metadata', { keyPath: 'path' });
                                        }
                                        if (!db.objectStoreNames.contains('FILE_DATA')) {
                                            db.createObjectStore('FILE_DATA', { keyPath: 'path' });
                                        }
                                        if (!db.objectStoreNames.contains('FILE_METADATA')) {
                                            db.createObjectStore('FILE_METADATA', { keyPath: 'path' });
                                        }
                                    };
                                    
                                    req.onsuccess = function() {
                                        console.log("Database initialized successfully");
                                    };
                                    
                                    req.onerror = function(event) {
                                        console.error("Error opening database:", event);
                                    };
                                };
                            } catch (e) {
                                console.error("Error initializing database:", e);
                            }
                        }
                        
                        // Initialize the database right away
                        initDB();
                        
                        // Also handle the cjFS_/files/ database
                        try {
                            var filesDbName = 'cjFS_/files/';
                            var delFilesReq = indexedDB.deleteDatabase(filesDbName);
                            delFilesReq.onsuccess = function() {
                                var filesReq = indexedDB.open(filesDbName, 1);
                                filesReq.onupgradeneeded = function(event) {
                                    var db = event.target.result;
                                    if (!db.objectStoreNames.contains('files')) {
                                        db.createObjectStore('files', { keyPath: 'path' });
                                    }
                                    if (!db.objectStoreNames.contains('metadata')) {
                                        db.createObjectStore('metadata', { keyPath: 'path' });
                                    }
                                };
                            };
                        } catch (e) {
                            console.error("Error with files database:", e);
                        }
                    });
                })();
                </script>
                """
                    
                # Insert our fix script right after the opening head tag
                content = content.replace('<head>', '<head>' + fix_script)
                
                return Response(content, mimetype='text/html')
            except Exception as e:
                return f"Error serving index.html: {str(e)}"

        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=8080)
        EOL

web:
    upstream:
        socket_family: tcp
        protocol: http
    commands:
        start: python server.py
    locations:
        "/":
            passthru: true
            scripts: false
            allow: true
