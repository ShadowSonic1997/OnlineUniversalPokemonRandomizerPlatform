name: pokemon-randomizer

type: python:3.9

disk: 512

hooks:
    build: |
        # Create a more advanced fix for CheerpJ's IndexedDB issues
        cat > cheerpj-fix.js << 'EOL'
        // Comprehensive CheerpJ IndexedDB Fix
        (function() {
          console.log("CheerpJ Database Fix Loading");
          
          // Store the original methods
          const originalOpen = indexedDB.open;
          
          // Replace the indexedDB.open method to handle all CheerpJ database requests
          indexedDB.open = function(name, version) {
            console.log(`IndexedDB open intercepted: ${name}, version: ${version}`);
            
            // Check if this is a CheerpJ database (they can have various prefixes)
            if (name.includes('cjFS_') || name === 'cheerpjFS') {
              console.log(`Creating CheerpJ database: ${name}`);
              
              // Create db with the name CheerpJ is requesting
              const request = originalOpen.call(indexedDB, name, 1);
              
              // Set up the schema correctly
              request.onupgradeneeded = function(event) {
                console.log(`Setting up schema for ${name}`);
                const db = event.target.result;
                
                // Create stores with all possible names CheerpJ might use
                const possibleStores = [
                  'files', 'metadata', 
                  'FILE_DATA', 'FILE_METADATA'
                ];
                
                for (const storeName of possibleStores) {
                  if (!db.objectStoreNames.contains(storeName)) {
                    console.log(`Creating store: ${storeName}`);
                    db.createObjectStore(storeName, { keyPath: 'path' });
                  }
                }
              };
              
              // Make transaction errors fail silently
              const originalSuccess = request.onsuccess;
              request.onsuccess = function(event) {
                const db = event.target.result;
                console.log(`Database ${name} opened successfully`);
                
                // Save the original transaction method
                const originalTransaction = db.transaction;
                
                // Replace with our version that handles errors
                db.transaction = function(storeNames, mode) {
                  console.log(`Transaction requested for stores: ${storeNames}`);
                  
                  try {
                    // First try the original method
                    return originalTransaction.call(db, storeNames, mode);
                  } catch (e) {
                    console.warn(`Transaction error for ${storeNames}: ${e.message}`);
                    
                    // Create a mock transaction that won't crash
                    return {
                      objectStore: function(name) {
                        console.log(`Providing mock store: ${name}`);
                        return {
                          put: function(item) { 
                            console.log(`Mock put: ${item && item.path}`);
                            const mockRequest = {};
                            setTimeout(() => {
                              if (mockRequest.onsuccess) mockRequest.onsuccess();
                            }, 0);
                            return mockRequest;
                          },
                          get: function(key) { 
                            console.log(`Mock get: ${key}`);
                            const mockRequest = {};
                            setTimeout(() => {
                              if (mockRequest.onsuccess) mockRequest.onsuccess();
                            }, 0);
                            return mockRequest;
                          }
                        };
                      }
                    };
                  }
                };
                
                // Call the original success handler
                if (originalSuccess) {
                  originalSuccess.apply(this, arguments);
                }
              };
              
              return request;
            }
            
            // For non-CheerpJ databases, use the original method
            return originalOpen.apply(this, arguments);
          };
          
          // Define a function to delete all CheerpJ databases
          function deleteAllCheerpJDatabases() {
            indexedDB.databases().then(function(dbs) {
              dbs.forEach(function(db) {
                if (db.name.includes('cjFS_') || db.name === 'cheerpjFS') {
                  console.log(`Deleting database: ${db.name}`);
                  indexedDB.deleteDatabase(db.name);
                }
              });
            }).catch(function(err) {
              console.warn("Could not list databases:", err);
              
              // Try deleting known names anyway
              console.log("Deleting known database names");
              indexedDB.deleteDatabase('cheerpjFS');
              indexedDB.deleteDatabase('cjFS_/files/');
            });
          }
          
          // Try to delete existing databases on page load
          window.addEventListener('load', deleteAllCheerpJDatabases);
          
          // Also try deleting right away
          deleteAllCheerpJDatabases();
          
          console.log("CheerpJ Database Fix Ready");
        })();
        EOL
        
        # Insert our fix script in the index.html
        # First make a backup
        cp index.html index.html.bak
        
        # Add our script as early as possible in the head
        sed -i '/<head>/a <script src="cheerpj-fix.js"></script>' index.html

web:
    locations:
        "/":
            root: ""
            index:
                - index.html
            expires: 1h
            scripts: false
            allow: true
