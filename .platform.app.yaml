name: pokemon-randomizer

type: python:3.9

disk: 512

hooks:
    build: |
        # Create a more comprehensive fix for CheerpJ's IndexedDB issues
        cat > cheerpj-fix.js << 'EOL'
        // CheerpJ IndexedDB Fix
        (function() {
          // Store the original open method
          const originalOpen = indexedDB.open;
          
          // Replace the open method with our own
          indexedDB.open = function(name, version) {
            console.log(`IndexedDB open called: ${name}, version: ${version}`);
            
            // If it's the CheerpJ database, intercept and fix
            if (name === 'cheerpjFS') {
              // Force version to be 1 to ensure onupgradeneeded will run
              const request = originalOpen.call(indexedDB, name, 1);
              
              // Always handle the upgrade
              const originalUpgradeNeeded = request.onupgradeneeded;
              request.onupgradeneeded = function(event) {
                console.log("Creating CheerpJ database schema");
                const db = event.target.result;
                
                // Create all possible stores CheerpJ might need
                if (!db.objectStoreNames.contains('files')) {
                  db.createObjectStore('files', { keyPath: 'path' });
                  console.log("Created 'files' store");
                }
                
                if (!db.objectStoreNames.contains('metadata')) {
                  db.createObjectStore('metadata', { keyPath: 'path' });
                  console.log("Created 'metadata' store");
                }
                
                // Some versions might use these names instead
                if (!db.objectStoreNames.contains('FILE_DATA')) {
                  db.createObjectStore('FILE_DATA', { keyPath: 'path' });
                  console.log("Created 'FILE_DATA' store");
                }
                
                if (!db.objectStoreNames.contains('FILE_METADATA')) {
                  db.createObjectStore('FILE_METADATA', { keyPath: 'path' });
                  console.log("Created 'FILE_METADATA' store");
                }
                
                // Call original handler if it exists
                if (originalUpgradeNeeded) {
                  originalUpgradeNeeded.apply(this, arguments);
                }
              };
              
              // Add success handler to patch transaction method after DB is open
              const originalSuccess = request.onsuccess;
              request.onsuccess = function(event) {
                console.log("Database opened successfully, patching transaction method");
                const db = event.target.result;
                
                // Patch the transaction method to handle missing stores
                const originalTransaction = db.transaction;
                db.transaction = function(storeNames, mode) {
                  try {
                    return originalTransaction.call(db, storeNames, mode);
                  } catch (e) {
                    console.warn("Transaction error:", e);
                    console.warn("Requested stores:", storeNames);
                    
                    // Try to create the missing store(s) on the fly
                    const tx = db.transaction([], 'readwrite');
                    // Return a mock transaction that won't crash
                    return {
                      objectStore: function(name) {
                        console.log("Accessing mock store:", name);
                        return {
                          put: function(data) { 
                            console.log("Mock put called with:", data);
                            return { onsuccess: null }; 
                          },
                          get: function(key) { 
                            console.log("Mock get called with:", key);
                            return { onsuccess: null }; 
                          }
                        };
                      }
                    };
                  }
                };
                
                // Call original success handler if it exists
                if (originalSuccess) {
                  originalSuccess.apply(this, arguments);
                }
              };
              
              return request;
            }
            
            // For other databases, use the original method
            return originalOpen.apply(this, arguments);
          };
          
          // Try to delete the database first to ensure a clean start
          console.log("Attempting to delete existing CheerpJ database");
          const deleteRequest = indexedDB.deleteDatabase('cheerpjFS');
          deleteRequest.onsuccess = function() {
            console.log("Existing database deleted successfully");
          };
          deleteRequest.onerror = function(event) {
            console.warn("Error deleting database:", event);
          };
        })();
        EOL
        
        # Make a backup of index.html
        cp index.html index.html.bak
        
        # Insert our fix script right after the opening head tag
        sed -i '/<head>/a <script src="cheerpj-fix.js"></script>' index.html

web:
    locations:
        "/":
            root: ""
            index:
                - index.html
            expires: 1h
            scripts: false
            allow: true
